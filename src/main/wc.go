package main

import (
	"fmt"
	"io/ioutil"
	"mapreduce"
	"os"
	"regexp"
	"strconv"
	"strings"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// TODO: you have to write this function
	//获取单词
	words := ReadWord(value)
	wm := make(map[string]*mapreduce.KeyValue)
	for _, w := range words {
		w = strings.Trim(w, "_")
		kv := wm[w]
		if kv == nil {
			kv = new(mapreduce.KeyValue)
			kv.Key = w
			kv.Value = "1"
			wm[w] = kv
		} else {
			value, err := strconv.Atoi(kv.Value)
			if err == nil {
				kv.Value = strconv.Itoa(value + 1)
			} else {
				fmt.Println(err)
			}
		}
	}
	for _, kv := range wm {
		res = append(res, *kv)
	}
	return res
}



// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	// TODO: you also have to write this function
	res := 0
	for _, v := range values {
		v, _ := strconv.Atoi(v)
		res += v
	}
	return strconv.Itoa(res)
}

func ReadWord(str string) []string{
	exp := regexp.MustCompile(`\w+`)
	return exp.FindAllString(str, -1)
}
func GetExpFiles(pattern string) (res []string) {
	exp := regexp.MustCompile(pattern)
	wd, _ := os.Getwd()
	fileInfos, _ := ioutil.ReadDir(wd)
	for _, fi := range fileInfos {
		if exp.MatchString(fi.Name()) {
			res = append(res, fi.Name())
		}
	}
	return res
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
//	go run wc.go master localhost:7777 pg-.*.txt
//	go run wc.go worker localhost:7777 localhost:4002
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", GetExpFiles(os.Args[3]), 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", GetExpFiles(os.Args[3]), 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
